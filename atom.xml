<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李晓鹏</title>
  <subtitle>Adam</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xpleeandroid.github.io/"/>
  <updated>2016-06-28T09:02:17.298Z</updated>
  <id>http://xpleeandroid.github.io/</id>
  
  <author>
    <name>Adam</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java8教程-泛型（Generics）</title>
    <link href="http://xpleeandroid.github.io/2016/06/28/java8-Generics/"/>
    <id>http://xpleeandroid.github.io/2016/06/28/java8-Generics/</id>
    <published>2016-06-28T06:04:35.000Z</published>
    <updated>2016-06-28T09:02:17.298Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;原文链接 [&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/generics/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://docs.oracle.com/javase/tutorial/java/generics/index.html&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;翻译： &lt;a href=&quot;https://github.com/adamin1990&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Adamin90&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;转载请注明出处，谢谢！&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;泛型（已更新）&quot;&gt;&lt;a href=&quot;#泛型（已更新）&quot; class=&quot;headerlink&quot; title=&quot;泛型（已更新）&quot;&gt;&lt;/a&gt;泛型（已更新）&lt;/h1&gt;&lt;p&gt; 在任何繁琐的（nontrivial）软件项目中，bug是家常便饭。细心的规划，编程和测试可以帮助减少bug的普遍性（pervasiveness）,但是无论如何，无论在哪里，bug总会伺机悄悄溜进（creep）你的代码，因为很明显，新的特性会不断的被引入，并且你的代码基数会不断变大和复杂。&lt;/p&gt;
&lt;p&gt;  幸运的是，一些bug相比其它比较容易检测。编译时bug可以在早期被检测到；你可以利用编译器的错误信息查明是什么问题并且解决，就在那时。然而，运行时bug会更加未预知,他们不会立即展示出来，不知道什么时候发生，可能根本不在程序真正出现问题的点上。&lt;/p&gt;
&lt;p&gt;泛型通过更多的在编译时检测bug为你的代码增加了稳定性。&lt;/p&gt;
&lt;h1 id=&quot;为什么要用泛型&quot;&gt;&lt;a href=&quot;#为什么要用泛型&quot; class=&quot;headerlink&quot; title=&quot;为什么要用泛型&quot;&gt;&lt;/a&gt;为什么要用泛型&lt;/h1&gt;&lt;p&gt;简言之，泛型能够使&lt;strong&gt;类型&lt;/strong&gt;（类和接口）在定义类，接口和方法的时候参数化。非常像方法定义时用到的&lt;strong&gt;形式参数&lt;/strong&gt;（formal parameters）,类型参数提供了一种你可以通过不同的输入来复用同一段代码的方法。不同点是，&lt;strong&gt;形式参数&lt;/strong&gt;输入的是&lt;strong&gt;值&lt;/strong&gt;，而类型参数输入的是&lt;strong&gt;类型&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;使用泛型比非泛型有很多好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编译时更强大的类型检测&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; Java编译器对泛型应用了强大的类型检测，如果代码违反了类型安全就会报错。修复编译时错误比修复运行时错误更加容易，因为运行时错误很难查找到。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;消除类型转换(Elimination of casts)&lt;/p&gt;
&lt;p&gt;以下代码片段没有泛型需要转型：&lt;/p&gt;
&lt;p&gt;  List list = new ArrayList();&lt;br&gt;  list.add(“hello”);&lt;br&gt;  String s = (String) list.get(0);&lt;br&gt;当我们重新用泛型编写，代码就不需要类型转换了：&lt;/p&gt;
&lt;p&gt;  List&lt;string&gt; list = new ArrayList&lt;string&gt;();&lt;br&gt;  list.add(“hello”);&lt;br&gt;  String s = list.get(0);   // no cast&lt;/string&gt;&lt;/string&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使开发者实现泛型算法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过泛型，开发者可以自己实现泛型算法，应用到一系列的不同类型，可以自定义，并且类型安全，易读。&lt;/p&gt;
&lt;h1 id=&quot;泛型类型&quot;&gt;&lt;a href=&quot;#泛型类型&quot; class=&quot;headerlink&quot; title=&quot;泛型类型&quot;&gt;&lt;/a&gt;泛型类型&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;泛型类型&lt;/strong&gt;是泛型类或者接口被类型参数化。下面的&lt;strong&gt;Box&lt;/strong&gt;类将被更改演示这个概念。&lt;/p&gt;
&lt;h3 id=&quot;简单的-Box-类&quot;&gt;&lt;a href=&quot;#简单的-Box-类&quot; class=&quot;headerlink&quot; title=&quot;简单的 Box 类&quot;&gt;&lt;/a&gt;简单的 Box 类&lt;/h3&gt;&lt;p&gt;列举一个简单的非泛型 &lt;strong&gt;Box&lt;/strong&gt;操作任意类型的object。它只需要提供两个方法：set，添加一个obejct到box，get,获取这个对象：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class Box {
private Object object;

public void set(Object object) { this.object = object; }
public Object get() { return object; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为它的方法接收或返回一个对象，你可以任意传入，只要传入的不是原始数据类型。我们没有在编译时辨别clas如何使用的。一边可能替换一个 Integer到box，另一边获取的不是Integer类型，而可能传入一个String类型，结果会导致运行时错误。&lt;/p&gt;
&lt;h3 id=&quot;泛型版本的Box&quot;&gt;&lt;a href=&quot;#泛型版本的Box&quot; class=&quot;headerlink&quot; title=&quot;泛型版本的Box&quot;&gt;&lt;/a&gt;泛型版本的Box&lt;/h3&gt;&lt;p&gt;泛型类的定义形式如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class name&amp;lt;T1, T2, ..., Tn&amp;gt; { /* ... */ }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;类型参数部分被一对尖括号（&amp;lt;&amp;gt;）划分，紧跟类名，它指定了&lt;strong&gt;类型参数&lt;/strong&gt;（也叫作类型变量）T1， T2， ….,和Tn.&lt;/p&gt;
&lt;p&gt;把原Box类更新为泛型类，你要通过把“public class Box”改变为“public class Box&lt;t&gt;”创建一个类型声明。这会引入一个&lt;strong&gt;类型变量&lt;/strong&gt;, &lt;strong&gt;T&lt;/strong&gt;,你可以在类中任意地方使用。通过这个改变，Box类就变为：&lt;/t&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
 * Generic version of the Box class.
 * @param &amp;lt;T&amp;gt; the type of the value being boxed
 */
public class Box&amp;lt;T&amp;gt; {
// T stands for &amp;quot;Type&amp;quot;
private T t;

public void set(T t) { this.t = t; }
public T get() { return t; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你可以看到，所有&lt;strong&gt;Object&lt;/strong&gt;出现的地方都被替换为T了。一个类型变量可以指定为任意非原始类型的类型：任意的类，任意的接口，任意的数组，甚至其他的类型变量。同样的技术可以应用到创建泛型接口上。&lt;/p&gt;
&lt;h3 id=&quot;类型参数命名规则（Naming-Conventions）&quot;&gt;&lt;a href=&quot;#类型参数命名规则（Naming-Conventions）&quot; class=&quot;headerlink&quot; title=&quot;类型参数命名规则（Naming Conventions）&quot;&gt;&lt;/a&gt;类型参数命名规则（Naming Conventions）&lt;/h3&gt;&lt;p&gt;通过规则，类型参数是单独的，大写字母。这个表示鲜明区别了你已知的变量命名规则，一个好的理由是：没有这个规则，你将很难区分类型变量和原生类或接口名的区别。&lt;/p&gt;
&lt;p&gt;最普遍使用的类型参数是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;E -Element（Java Collections框架大量使用）&lt;/li&gt;
&lt;li&gt;K -Key&lt;/li&gt;
&lt;li&gt;N -Number&lt;/li&gt;
&lt;li&gt;T -Type&lt;/li&gt;
&lt;li&gt;V -Value &lt;/li&gt;
&lt;li&gt;S,U,V 等 -第二，第三，第四个类型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可以在JAVA SE API 看到这些名字的使用。&lt;/p&gt;
&lt;h3 id=&quot;调用和实例化一个泛型类型&quot;&gt;&lt;a href=&quot;#调用和实例化一个泛型类型&quot; class=&quot;headerlink&quot; title=&quot;调用和实例化一个泛型类型&quot;&gt;&lt;/a&gt;调用和实例化一个泛型类型&lt;/h3&gt;&lt;p&gt;要在你的代码引用泛型类 Box，你必须执行 泛型类型调用，把T替换成具体的值，比如Integer： &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Box&amp;lt;Integer&amp;gt; integerBox;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你可以认为泛型类型调用跟原生方法调用大致一样，但是不是传入一个参数到方法，而是传入一个类型蚕食–这个情况下的Integer–给Box类本身。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Type Parameter&lt;/strong&gt;和&lt;strong&gt;Type Argument&lt;/strong&gt;术语（Terminology）：&lt;br&gt;很多开发者交换使用这个两个术语，但是这两个术语并不同。敲代码时，&lt;br&gt;type argument 创建一个参数化类型，因此，Foo&lt;t&gt;中的T是type parameter，Foo&lt;string&gt; f中的String是一个type argument。&lt;/string&gt;&lt;/t&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;就想其他的变量定义，上面的代码不会真正创建一个新的 Box对象。它只是声明，integerBox将持有一个“Box of Integer”的引用，用以读取Box&lt;integer&gt;.泛型类型的调用通常称为参数化类型。&lt;/integer&gt;&lt;/p&gt;
&lt;p&gt;为了实例化这个类，用new 关键字，把&lt;integer&gt;放在类名和括号之间。&lt;/integer&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Box&amp;lt;Integer&amp;gt; integerBox = new Box&amp;lt;Integer&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;原文链接 [&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/generics/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https:
    
    </summary>
    
    
      <category term="java" scheme="http://xpleeandroid.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>翻译:no more findViewById</title>
    <link href="http://xpleeandroid.github.io/2016/06/26/translate-no-more-findviewbyid/"/>
    <id>http://xpleeandroid.github.io/2016/06/26/translate-no-more-findviewbyid/</id>
    <published>2016-06-26T06:40:57.000Z</published>
    <updated>2016-06-28T05:42:00.663Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;原文链接 &lt;a href=&quot;https://medium.com/google-developers/no-more-findviewbyid-457457644885#.cs0jg2og6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://medium.com/google-developers/no-more-findviewbyid-457457644885#.cs0jg2og6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;翻译： &lt;a href=&quot;https://github.com/adamin1990&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Adamin90&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;转载请注明出处，谢谢！&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;No-More-findViewById&quot;&gt;&lt;a href=&quot;#No-More-findViewById&quot; class=&quot;headerlink&quot; title=&quot;No More findViewById&quot;&gt;&lt;/a&gt;No More findViewById&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;Android Studio开发android程序的一个小特点是数据绑定。我会在将来的文章中讲解它的其他一些优雅的特点，但是你要了解的最基础的是怎样消除findViewById.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;TextView hello = (TextView) findViewById(R.id.hello);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;虽然现在有很多试用的方法可以省略这些多余代码，但是Android Studio 1.5以及更高版本已经有官方的方法了。&lt;/p&gt;
&lt;p&gt;首先，你必须在Application的build.gradle里的android块内填写如下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;android {
…
dataBinding.enabled = true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;下一步就是在你的layout文件的最外层添加 &lt;layout&gt;标签，不管你用的是任何 ViewGroup:&lt;/layout&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;layout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
    xmlns:tools=&amp;quot;http://schemas.android.com/tools&amp;quot;&amp;gt;
&amp;lt;RelativeLayout
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;match_parent&amp;quot;
        android:paddingLeft=&amp;quot;@dimen/activity_horizontal_margin&amp;quot;
        android:paddingRight=&amp;quot;@dimen/activity_horizontal_margin&amp;quot;
        android:paddingTop=&amp;quot;@dimen/activity_vertical_margin&amp;quot;
        android:paddingBottom=&amp;quot;@dimen/activity_vertical_margin&amp;quot;
        tools:context=&amp;quot;.MainActivity&amp;quot;&amp;gt;

    &amp;lt;TextView
            android:id=&amp;quot;@+id/hello&amp;quot;
            android:layout_width=&amp;quot;wrap_content&amp;quot;
            android:layout_height=&amp;quot;wrap_content&amp;quot;/&amp;gt;

&amp;lt;/RelativeLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Layout&lt;/strong&gt;标签告诉Android Studio这个layout在编译时将进行额外的操作，查找到所有感兴趣的view,并且标签为下一步。所有外部没有包&lt;code&gt;layout&lt;/code&gt;标签的布局将不会执行额外操作。所以你可以在新项目中少量使用而无需改变项目中其他的部分。&lt;/p&gt;
&lt;p&gt;下面要做的就是告诉它在运行时分别加载你的layout。因为它向后兼容，所以不需要依赖新框架的改变来加载这些预执行的layout文件。因此你只需对程序做一个轻微的改变。&lt;/p&gt;
&lt;p&gt;从一个Activity,不是：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    setContentView(R.layout.hello_world);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TextView hello = (TextView) findViewById(R.id.hello);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hello.setText(&lt;span class=&quot;string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而是这样加载：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;HelloWorldBinding binding = 
DataBindingUtil.setContentView(this, R.layout.hello_world);
binding.hello.setText(&amp;quot;Hello World&amp;quot;); 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你可以看到 &lt;strong&gt;HelloWordBinding&lt;/strong&gt;这个类自动为&lt;strong&gt;hello_world.xml&lt;/strong&gt;生成并且id为“@+id/hello”的view分配到了一个&lt;strong&gt;hello&lt;/strong&gt;的field你可以使用。没有强制类型转换，没有findViewById.&lt;/p&gt;
&lt;p&gt;这标兵这是访问view的机制不仅仅比findViewById更加简单，而且也更加快！绑定程序一次执行覆盖所有layout的view，把view分配到field。当你运行findViewById，的时候view结构每次都会被遍历查找。&lt;/p&gt;
&lt;p&gt;你会注意到一件事:它对你的变量名使用了驼峰命名法（比如hello_world.html 变成类 HelloWorldBinding）,所以如果你给它的id是“@+id/hello_text”,那么field的名称将会是 helloText.&lt;/p&gt;
&lt;p&gt;当你正在inflate你布局里RecyclerView,ViewPager，或其他不设置Activity内容的控件，你将希望在生成的类上用生成的类型安全的方法，这里有几个版本匹配LayoutInflater,所以使用你最适合食用的.举个例子：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;HelloWorldBinding binding = HelloWorldBinding.inflate(
getLayoutInflater(), container, attachToContainer);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果你们有把被inflate的view 附加到包含他们的ViewGroup上，你必须访问被infalte的view的view结构。你可以用binding的getRoot()方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;linearLayout.addView(binding.getRoot());
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在，你可能会考虑，如果我有一个layout包含同步view的不同配置呢？layout预执行和运行时inflate阶段通过添加所有View 的id到生成的类，如果没有被inflate的话设置为null。&lt;/p&gt;
&lt;p&gt;相当神奇，不是吗？最好的部分是运行时没有反射和其他任何高消耗的技术。把他少量添加到你现有程序里面非常容易，他能让你的生活更加简单，让你的layout加载的更快！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;原文链接 &lt;a href=&quot;https://medium.com/google-developers/no-more-findviewbyid-457457644885#.cs0jg2og6&quot; target=&quot;_blank&quot; rel=&quot;
    
    </summary>
    
    
      <category term="android" scheme="http://xpleeandroid.github.io/tags/android/"/>
    
      <category term="翻译" scheme="http://xpleeandroid.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>GoodNight</title>
    <link href="http://xpleeandroid.github.io/2016/06/25/GoodNight/"/>
    <id>http://xpleeandroid.github.io/2016/06/25/GoodNight/</id>
    <published>2016-06-25T15:50:44.000Z</published>
    <updated>2016-06-28T05:42:00.662Z</updated>
    
    <content type="html">&lt;p&gt; use one day for establish this blog,thanks for opensource!&lt;/p&gt;
&lt;p&gt; Now we can say good night!&lt;/p&gt;
&lt;p&gt; ``&lt;br&gt;&lt;img src=&quot;http://f5.topitme.com/5/98/93/1153052438ba893985l.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt; use one day for establish this blog,thanks for opensource!&lt;/p&gt;
&lt;p&gt; Now we can say good night!&lt;/p&gt;
&lt;p&gt; ``&lt;br&gt;&lt;img src=&quot;http://f5.topitme.
    
    </summary>
    
    
      <category term="随想" scheme="http://xpleeandroid.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
</feed>
